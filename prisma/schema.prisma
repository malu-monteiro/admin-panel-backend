generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model WorkingHours {
    id        Int      @id @default(autoincrement())
    startTime String
    endTime   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([startTime, endTime])
    @@map("working_hours")
}

model Service {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Availability {
    id           Int           @id @default(autoincrement())
    date         DateTime      @unique
    isBlocked    Boolean       @default(false)
    blockedSlots BlockedSlot[]
}

model BlockedSlot {
    id             Int          @id @default(autoincrement())
    startTime      String
    endTime        String
    availabilityId Int
    availability   Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
}

model Admin {
    id            Int      @id @default(autoincrement())
    name          String?
    email         String   @unique
    password      String
    emailVerified Boolean  @default(false)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    emailVerificationTokens EmailVerificationToken[]
    passwordResetTokens     PasswordResetToken[]     @relation("PasswordResetTokens")
}

model PasswordResetToken {
    id        Int      @id @default(autoincrement())
    token     String   @unique
    adminId   Int
    admin     Admin    @relation("PasswordResetTokens", fields: [adminId], references: [id], onDelete: Cascade)
    expiresAt DateTime
    used      Boolean  @default(false)
    createdAt DateTime @default(now())

    @@map("password_reset_tokens")
}

model EmailVerificationToken {
    id        Int      @id @default(autoincrement())
    token     String   @unique
    adminId   Int
    newEmail  String?
    admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
    expiresAt DateTime
    createdAt DateTime @default(now())

    @@map("email_verification_tokens")
}

model Appointment {
    id        String   @id @default(uuid())
    service   String
    date      DateTime
    time      String
    name      String
    email     String
    message   String?
    status    String   @default("PENDING")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("appointments")
}
